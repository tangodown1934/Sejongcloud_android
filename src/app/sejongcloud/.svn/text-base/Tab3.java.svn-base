package exam.AndroidFirst;

import java.net.URL;


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;


import android.app.Activity;
import android.app.AlertDialog;
import android.app.ListActivity;
import android.app.ProgressDialog;
import android.app.TabActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;


public class Tab3 extends ListActivity{
    class CommentResult {
    	String comment;
    	String date;
    	String no;
    }
	long backKeyClick=0;
	long backKeyClickTime;
    static ArrayList<CommentResult> mylist;
	CommentAdapter commentAdapter;
    ProgressDialog dialog;
    View v;
    ListView lv;
    LinearLayout linear;
    int commentCount;
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tab3);

    	commentCount=0;
    	Button comment=(Button)findViewById(R.id.commentButton);
    	comment.setOnClickListener(mClickListener);
        mylist = new ArrayList<CommentResult>();
        LayoutInflater inflater=getLayoutInflater();
        v=inflater.inflate(R.layout.tab3_developer, null);
        lv = getListView();
        lv.addHeaderView(v);
        lv.setTextFilterEnabled(true);	
		getCommentList();
		
	}
    private class CommentAdapter extends ArrayAdapter<CommentResult> {
        private ArrayList<CommentResult> items;
        public CommentAdapter(Context context, int textViewResourceId, ArrayList<CommentResult> items) {
                super(context, textViewResourceId, items);
                this.items = items;
        }
        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
                View v = convertView;
                if (v == null) {
                    LayoutInflater vi = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                    v = vi.inflate(R.layout.tab3_inner, null);
                }
                CommentResult mNotice = items.get(position);
                if (mNotice != null) {
                        TextView tt = (TextView) v.findViewById(R.id.comment);
                        TextView bt = (TextView) v.findViewById(R.id.commentDate);
                        if (tt != null){
                        	tt.setText(mNotice.comment);                            
                        }
                        if(bt != null){
                        		bt.setText(mNotice.date);
                        }
                }
                return v;
        }
    }
	OnClickListener mClickListener=new Button.OnClickListener(){
		public void onClick(View v){
    		linear=(LinearLayout)View.inflate(Tab3.this, R.layout.tab3_comment, null);
	        new AlertDialog.Builder(Tab3.this)
	        .setTitle("댓글")
	        //.setIcon(R.drawable.icon)
	        .setView(linear)
	        .setPositiveButton("남기기", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {
					pushComment();
				}
			}).setNegativeButton("취소", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int which) {
				}
	        }).show();

		}
	};
	public void pushComment(){
	    Thread thread = new Thread(new Runnable() {
	        public void run() {
				final EditText eComment=(EditText)linear.findViewById(R.id.commentText);
				String comment =eComment.getText().toString();
				try{
					URL url=new URL("http://222.107.228.230/sejongstick/app/php/comment.php");
					HttpURLConnection httpURLCon=(HttpURLConnection)url.openConnection();
					httpURLCon.setDefaultUseCaches(false);
					httpURLCon.setDoInput(true);
					httpURLCon.setDoOutput(true);
					httpURLCon.setRequestMethod("POST");
					httpURLCon.setRequestProperty("content-type", "application/x-www-form-urlencoded");

					StringBuffer sb=new StringBuffer();
					sb.append("comment").append("=").append(comment);
					
					PrintWriter pw=new PrintWriter(new OutputStreamWriter(httpURLCon.getOutputStream(),"UTF-8"));
					pw.write(sb.toString());
					pw.flush();
					
					BufferedReader bf=new BufferedReader(new InputStreamReader(httpURLCon.getInputStream(),"UTF-8"));
					/*
					StringBuilder buff=new StringBuilder();
					String line;
					while((line=bf.readLine())!=null){
						buff.append(line);
					}
					*/
					httpURLCon.disconnect();
					bf.close();
					pw.close();
					
    	            pushHandler.sendEmptyMessage(0);
				}catch(Exception e){}
	        }
	    });
	    thread.start();
	}
	private Handler pushHandler = new Handler() {
	    public void handleMessage(Message msg) {
			Toast.makeText(Tab3.this, "댓글을 남기셨습니다", Toast.LENGTH_LONG).show();
	        mylist = new ArrayList<CommentResult>(); // arraylist 초기화 시키고 다시 어댑터에 적용하기 위해 
	        getCommentList(); // 긁어오기 다시 (for refresh)
		    //commentAdapter.notifyDataSetChanged();
	    }
	};
	public void getCommentList(){
    	dialog = ProgressDialog.show(Tab3.this, "", "로딩중.... ", true);
	    Thread thread = new Thread(new Runnable() {
	        public void run() {
	        	JSONArray json = JSONfunctions.getJSONfromURL("http://222.107.228.230/sejongstick/app/php/commentList.php");
                //Toast.makeText(Main.this, json.toString(), Toast.LENGTH_LONG).show();
                try{
                	JSONArray  test = json;
                	commentCount=test.length();
                	for(int i=0;i<test.length();i++){	
        				CommentResult result = new CommentResult();	
        				JSONObject data = test.getJSONObject(test.length()-i-1);
        				result.no=data.getString("no");
        				result.comment=data.getString("comment");
        				result.date=data.getString("date");
        	        	mylist.add(result);
        			}		
                    commentAdapter=new CommentAdapter(Tab3.this,R.layout.tab3_inner,mylist);
    	            getHandler.sendEmptyMessage(0);
                }catch(Exception e){Log.e("error",e.getMessage());}
	        }
	    });
	    thread.start();
	}
	private Handler getHandler = new Handler() {
	    public void handleMessage(Message msg) {
	    	((TextView)v.findViewById(R.id.commentCount)).setText("댓글: "+commentCount+"개");
            setListAdapter(commentAdapter);
            dialog.dismiss();
	    }
	};

	@Override
	 public boolean onKeyDown(int keyCode, KeyEvent event) {
	       
	        if ((keyCode == KeyEvent.KEYCODE_BACK) ) {

	         long currentTime = System.currentTimeMillis();
	         final int duration = 2000;
	         
	         backKeyClick ++; 
	         
	         if (backKeyClick == 1){
	          backKeyClickTime = System.currentTimeMillis();
	          
	          Toast t =  Toast.makeText(Tab3.this,
	            "'뒤로'버튼을  한번 더 누르면 종료됩니다",
	            Toast.LENGTH_SHORT);
	          t.setDuration(duration);
	          t.show();
	          
	          new Thread(new Runnable() {    

	     @Override
	     public void run() {
	      try {
	       Thread.sleep(duration);
	      } catch (InterruptedException e) {
	       e.printStackTrace();
	      }
	      backKeyClick=0;
	     }
	    }).start();
	         }else if(backKeyClick == 2){

	          if(currentTime - backKeyClickTime <= duration  ){
	           return super.onKeyDown(keyCode, event);
	          }
	          backKeyClick = 0;
	         } 
	         return true;   
	        }        
	        return super.onKeyDown(keyCode, event);    
	 }
}
